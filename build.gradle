
buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
}

plugins {
    id "java"
    id "java-library"
    id "checkstyle"
    id "signing"
    id "maven-publish"
    id "de.marcphilipp.nexus-publish" version "0.3.0"
    id "io.codearte.nexus-staging" version "0.21.2"
    id "org.ajoberstar.git-publish" version "2.1.3"
    id "idea"
}

repositories {
    mavenLocal()
    // Before LaunchDarkly release artifacts get synced to Maven Central they are here along with snapshots:
    maven { url "https://oss.sonatype.org/content/groups/public/" }
    mavenCentral()
}

configurations.all {
    // check for updates every build for dependencies with: 'changing: true'
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

allprojects {
    group = 'com.launchdarkly'
    version = "${version}"
    archivesBaseName = "launchdarkly-java-sdk-common"
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

ext {
    sdkBasePackage = "com.launchdarkly.sdk"
    sdkBaseName = "launchdarkly-java-sdk-common"
}

ext.versions = [
	"gson": "2.7"
]

ext.libraries = [:]

dependencies {
    api "com.google.code.gson:gson:${versions.gson}"
    testImplementation "org.hamcrest:hamcrest-all:1.3"
    testImplementation "junit:junit:4.12"
}

checkstyle {
	configFile file("${project.rootDir}/checkstyle.xml")
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    // Force the Javadoc build to fail if there are any Javadoc warnings. See: https://discuss.gradle.org/t/javadoc-fail-on-warning/18141/3
    // The '-quiet' as second argument is actually a hack,
    // since the one parameter addStringOption doesn't seem to
    // work, we extra add '-quiet', which is added anyway by
    // gradle. See https://github.com/gradle/gradle/issues/2354
    // See JDK-8200363 (https://bugs.openjdk.java.net/browse/JDK-8200363)
    // for information about the -Xwerror option.
    options.addStringOption('Xwerror', '-quiet')
}

artifacts {
    archives jar, sourcesJar, javadocJar
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

nexusStaging {
    packageGroup = "com.launchdarkly"
    numberOfRetries = 40 // we've seen extremely long delays in closing repositories
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            groupId = 'com.launchdarkly'
            artifactId = 'launchdarkly-java-sdk-common'

            artifact sourcesJar
            artifact javadocJar
            
            pom {
                name = 'launchdarkly-java-sdk-common'
                description = 'LaunchDarkly SDK Java Common Classes'
                url = 'https://github.com/launchdarkly/java-sdk-common'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'LaunchDarkly'
                        email = 'team@launchdarkly.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/launchdarkly/java-sdk-common.git'
                    developerConnection = 'scm:git:ssh:git@github.com:launchdarkly/java-sdk-common.git'
                    url = 'https://github.com/launchdarkly/java-sdk-common'
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}

nexusPublishing {
    clientTimeout = java.time.Duration.ofMinutes(2) // we've seen extremely long delays in creating repositories
    repositories {
        sonatype {
            username = ossrhUsername
            password = ossrhPassword            
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
    onlyIf { !"1".equals(project.findProperty("LD_SKIP_SIGNING")) } // so we can build jars for testing in CI
}

gitPublish {
    repoUri = 'git@github.com:launchdarkly/java-sdk-common.git'
    branch = 'gh-pages'
    contents {
        from javadoc
    }
    commitMessage = 'publishing javadocs'
}
